package com.services;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.8
 * 2013-06-05T09:40:11.183-04:00
 * Generated source version: 2.6.8
 * 
 */
@WebServiceClient(name = "wsEstablishments", 
                  wsdlLocation = "file:/C:/Users/jhernandez/sandbox/PanMash/src/main/java/com/services/wsEstablishments.asmx",
                  targetNamespace = "http://tempuri.org/") 
public class WsEstablishments extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "wsEstablishments");
    public final static QName WsEstablishmentsHttpPost = new QName("http://tempuri.org/", "wsEstablishmentsHttpPost");
    public final static QName WsEstablishmentsHttpGet = new QName("http://tempuri.org/", "wsEstablishmentsHttpGet");
    public final static QName WsEstablishmentsSoap = new QName("http://tempuri.org/", "wsEstablishmentsSoap");
    public final static QName WsEstablishmentsSoap12 = new QName("http://tempuri.org/", "wsEstablishmentsSoap12");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/jhernandez/sandbox/PanMash/src/main/java/com/services/wsEstablishments.asmx");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WsEstablishments.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/jhernandez/sandbox/PanMash/src/main/java/com/services/wsEstablishments.asmx");
        }
        WSDL_LOCATION = url;
    }

    public WsEstablishments(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WsEstablishments(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WsEstablishments() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WsEstablishments(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WsEstablishments(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WsEstablishments(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns WsEstablishmentsHttpPost
     */
    @WebEndpoint(name = "wsEstablishmentsHttpPost")
    public WsEstablishmentsHttpPost getWsEstablishmentsHttpPost() {
        return super.getPort(WsEstablishmentsHttpPost, WsEstablishmentsHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WsEstablishmentsHttpPost
     */
    @WebEndpoint(name = "wsEstablishmentsHttpPost")
    public WsEstablishmentsHttpPost getWsEstablishmentsHttpPost(WebServiceFeature... features) {
        return super.getPort(WsEstablishmentsHttpPost, WsEstablishmentsHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns WsEstablishmentsHttpGet
     */
    @WebEndpoint(name = "wsEstablishmentsHttpGet")
    public WsEstablishmentsHttpGet getWsEstablishmentsHttpGet() {
        return super.getPort(WsEstablishmentsHttpGet, WsEstablishmentsHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WsEstablishmentsHttpGet
     */
    @WebEndpoint(name = "wsEstablishmentsHttpGet")
    public WsEstablishmentsHttpGet getWsEstablishmentsHttpGet(WebServiceFeature... features) {
        return super.getPort(WsEstablishmentsHttpGet, WsEstablishmentsHttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns WsEstablishmentsSoap
     */
    @WebEndpoint(name = "wsEstablishmentsSoap")
    public WsEstablishmentsSoap getWsEstablishmentsSoap() {
        return super.getPort(WsEstablishmentsSoap, WsEstablishmentsSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WsEstablishmentsSoap
     */
    @WebEndpoint(name = "wsEstablishmentsSoap")
    public WsEstablishmentsSoap getWsEstablishmentsSoap(WebServiceFeature... features) {
        return super.getPort(WsEstablishmentsSoap, WsEstablishmentsSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WsEstablishmentsSoap
     */
    @WebEndpoint(name = "wsEstablishmentsSoap12")
    public WsEstablishmentsSoap getWsEstablishmentsSoap12() {
        return super.getPort(WsEstablishmentsSoap12, WsEstablishmentsSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WsEstablishmentsSoap
     */
    @WebEndpoint(name = "wsEstablishmentsSoap12")
    public WsEstablishmentsSoap getWsEstablishmentsSoap12(WebServiceFeature... features) {
        return super.getPort(WsEstablishmentsSoap12, WsEstablishmentsSoap.class, features);
    }

}
